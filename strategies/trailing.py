"""
Trailing Stop Ï†ÑÎûµ
Í≥†Ï†ê Ï∂îÏ†ÅÌïòÎ©∞ ÏùµÏ†à (Ï∂îÏÑ∏ Ï∂îÏ¢Ö + ÏàòÏùµ Í∑πÎåÄÌôî)
"""
import sys
import os

project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

import pyupbit
from utils.logger import info, warning, debug
from utils.state_manager import state_manager
from core.position_manager import position_manager
from master.global_risk import global_risk


class TrailingStrategy:
    """Ï∂îÏ†Å Îß§ÎèÑ Ï†ÑÎûµ"""

    def __init__(self, timeframe='1h'):
        self.timeframe = timeframe
        self.name = f"Trailing-{timeframe}"

        # Trailing ÏÑ§Ï†ï
        self.trailing_percent = 0.05  # Í≥†Ï†ê ÎåÄÎπÑ -5% Îß§ÎèÑ
        self.activation_profit = 0.03  # 3% Ïù¥ÏÉÅ ÏàòÏùµ Ïãú ÌôúÏÑ±Ìôî
        self.stop_loss = 0.04  # 4% ÏÜêÏ†à

        # ÏÉÅÌÉú Í¥ÄÎ¶¨
        self.highest_price = {}  # {coin: price}
        self.activated = {}  # {coin: bool}

        info(f"üéØ {self.name} Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî")
        info(f"  Ï∂îÏ†Å ÎπÑÏú®: {self.trailing_percent * 100:.1f}%")
        info(f"  ÌôúÏÑ±Ìôî: {self.activation_profit * 100:.1f}% ÏàòÏùµ ÌõÑ")

    def analyze(self, coin):
        """
        Trailing Î∂ÑÏÑù - Í≥†Ï†ê Ï∂îÏ†Å

        Returns:
            dict: Ïã†Ìò∏ Ï†ïÎ≥¥
        """
        try:
            current_price = pyupbit.get_current_price(coin)

            if not current_price:
                return None

            reasons = []

            # Ìè¨ÏßÄÏÖò Ï≤¥ÌÅ¨
            has_position = state_manager.is_in_position('spot', coin)

            if not has_position:
                # Ìè¨ÏßÄÏÖò ÏóÜÏúºÎ©¥ HOLD (Îã§Î•∏ Ï†ÑÎûµÏúºÎ°ú ÏßÑÏûÖ ÌïÑÏöî)
                return {
                    'signal': 'HOLD',
                    'score': 0.0,
                    'confidence': 0.0,
                    'reasons': ['Trailing: Ìè¨ÏßÄÏÖò ÏóÜÏùå'],
                    'recommendation': 'HOLD'
                }

            # Ìè¨ÏßÄÏÖò ÏûàÏùÑ Îïå
            position = state_manager.get_spot_position(coin)

            if position:
                avg_price = position.get('avg_price', current_price)
                profit_ratio = (current_price - avg_price) / avg_price

                # Í≥†Ï†ê Í∞±Ïã†
                if coin not in self.highest_price or current_price > self.highest_price[coin]:
                    self.highest_price[coin] = current_price
                    info(f"üîù {coin} Í≥†Ï†ê Í∞±Ïã†: {current_price:,.0f}Ïõê")

                # ÌôúÏÑ±Ìôî Ï≤¥ÌÅ¨
                if not self.activated.get(coin, False) and profit_ratio >= self.activation_profit:
                    self.activated[coin] = True
                    info(f"‚úÖ {coin} Trailing ÌôúÏÑ±Ìôî!")

                # Trailing ÌôúÏÑ±Ìôî Ïãú
                if self.activated.get(coin, False):
                    drop_from_high = (self.highest_price[coin] - current_price) / self.highest_price[coin]

                    if drop_from_high >= self.trailing_percent:
                        reasons.append(f'Trailing: Í≥†Ï†ê ÎåÄÎπÑ -{drop_from_high * 100:.1f}%')
                        reasons.append(f'ÏùµÏ†à: +{profit_ratio * 100:.1f}%')

                        return {
                            'signal': 'SELL',
                            'score': -4.0,
                            'confidence': 0.95,
                            'reasons': reasons,
                            'recommendation': 'SELL'
                        }

                # ÏÜêÏ†à
                if profit_ratio <= -self.stop_loss:
                    reasons.append(f'Trailing ÏÜêÏ†à ({profit_ratio * 100:.1f}%)')
                    return {
                        'signal': 'SELL',
                        'score': -4.0,
                        'confidence': 0.95,
                        'reasons': reasons,
                        'recommendation': 'SELL'
                    }

                # Ï∂îÏ†Å Ï§ë
                reasons.append(f'Í≥†Ï†ê Ï∂îÏ†Å Ï§ë ({self.highest_price[coin]:,.0f}Ïõê, +{profit_ratio * 100:.1f}%)')
                return {
                    'signal': 'HOLD',
                    'score': 0.0,
                    'confidence': 0.0,
                    'reasons': reasons,
                    'recommendation': 'HOLD'
                }

            return {
                'signal': 'HOLD',
                'score': 0.0,
                'confidence': 0.0,
                'reasons': ['Trailing ÎåÄÍ∏∞'],
                'recommendation': 'HOLD'
            }

        except Exception as e:
            warning(f"‚ùå {coin} Trailing Î∂ÑÏÑù Ïò§Î•ò: {e}")
            return None

    def execute(self, coin):
        """Trailing Ï†ÑÎûµ Ïã§Ìñâ"""
        info(f"\n{'=' * 60}")
        info(f"üéØ {self.name} Ï†ÑÎûµ Ïã§Ìñâ: {coin}")
        info(f"{'=' * 60}")

        has_position = state_manager.is_in_position('spot', coin)

        if not has_position:
            # TrailingÏùÄ ÏßÑÏûÖ Ï†ÑÎûµÏù¥ ÏïÑÎãò
            return {'action': 'HOLD', 'reason': 'TrailingÏùÄ Ï≤≠ÏÇ∞ Ï†ÑÏö©'}
        else:
            return self._check_exit(coin)

    def _check_exit(self, coin):
        """Ï≤≠ÏÇ∞ Ï°∞Í±¥ Ï≤¥ÌÅ¨"""
        signal = self.analyze(coin)

        if signal and signal['signal'] == 'SELL':
            info(f"\nüí∞ Trailing Ï≤≠ÏÇ∞: {signal['reasons'][0]}")

            result = position_manager.close_spot_position(coin, signal['reasons'][0])

            if result['success']:
                # ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
                self.highest_price[coin] = None
                self.activated[coin] = False

                return {
                    'action': 'SELL',
                    'pnl': result['pnl'],
                    'return_percent': result['return_percent'],
                    'reason': signal['reasons'][0]
                }
            else:
                return {'action': 'FAILED', 'reason': result.get('reason')}

        status = position_manager.get_position_status('spot', coin)

        if status:
            info(f"\nüìä Trailing Ìè¨ÏßÄÏÖò:")
            info(f"  ÏßÑÏûÖÍ∞Ä: {status['entry_price']:,.0f}Ïõê")
            info(f"  ÌòÑÏû¨Í∞Ä: {status['current_price']:,.0f}Ïõê")
            info(f"  Í≥†Ï†ê: {self.highest_price.get(coin, 0):,.0f}Ïõê")
            info(f"  ÏàòÏùµÎ•†: {status['return_percent']:+.2f}%")
            info(f"  ÌôúÏÑ±Ìôî: {'‚úÖ' if self.activated.get(coin) else '‚ùå'}")

        return {'action': 'HOLD', 'reason': 'Ï≤≠ÏÇ∞ Ï°∞Í±¥ ÎØ∏Îã¨'}


# Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§
trailing_strategy = TrailingStrategy('1h')

if __name__ == "__main__":
    print("üß™ Trailing Ï†ÑÎûµ ÌÖåÏä§Ìä∏\n")